import streamlit as st
import os
from dotenv import load_dotenv

# LangChain / OpenAI
from openai import OpenAI
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains import RetrievalQA
from langchain.llms import OpenAI as LangOpenAI

# –ü–∞—Ä—Å–µ—Ä—ã
from PyPDF2 import PdfReader
from docx import Document as DocxDocument

# API –∫–ª—é—á
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY not found in .env")

client = OpenAI(api_key=OPENAI_API_KEY)

# ===== –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å =====
st.markdown("""
    <style>
        body {
            background-color: #f9f9fb;
        }
        .main-title {
            font-family: 'Segoe UI', sans-serif;
            font-size: 36px;
            color: #333333;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .desc-text {
            font-size: 16px;
            color: #555;
            margin-bottom: 30px;
        }
        .upload-box {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.05);
            margin-bottom: 25px;
        }
        .btn-custom {
            background-color: #0057D9;
            color: white;
            padding: 12px 25px;
            border-radius: 8px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }
        .btn-custom:hover {
            background-color: #0041a8;
        }
        .result-box {
            background-color: #eef2ff;
            padding: 20px;
            border-radius: 12px;
            margin-top: 20px;
            font-size: 16px;
            color: #333;
        }
    </style>
""", unsafe_allow_html=True)

# ===== –¢–∞–±—ã: –ò–ò –∏–ª–∏ –ü–ª–∞–≥–∏–∞—Ç =====
tab1, tab2 = st.tabs(["üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò", "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç"])

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====
def extract_text(file) -> str:
    if file.type == "application/pdf":
        reader = PdfReader(file)
        return "".join(page.extract_text() or "" for page in reader.pages)
    elif file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        doc = DocxDocument(file)
        return "\n".join(p.text for p in doc.paragraphs)
    elif file.type == "text/plain":
        return file.read().decode("utf-8")
    return ""

# ===== Tab 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ò =====
with tab1:
    st.markdown('<div class="main-title">ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò</div>', unsafe_allow_html=True)
    st.markdown('<div class="desc-text">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –±—ã–ª –ª–∏ –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.</div>', unsafe_allow_html=True)

    with st.container():
        ai_file = st.file_uploader("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (.txt, .pdf, .docx)", type=["txt", "pdf", "docx"], key="ai_file")

    if st.button("üì° –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", key="ai_check"):
        if ai_file:
            with st.spinner("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."):
                text = extract_text(ai_file)
                prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏, –±—ã–ª –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ò–ò. –û–±—ä—è—Å–Ω–∏ —Å–≤–æ–π –≤—ã–≤–æ–¥.\n\n{text}"
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}]
                )
                result = response.choices[0].message.content
            st.markdown('<div class="result-box">' + result + '</div>', unsafe_allow_html=True)
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")

# ===== Tab 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç =====
with tab2:
    st.markdown('<div class="main-title">üìö –°–∏—Å—Ç–µ–º–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–∞—Ç–∞</div>', unsafe_allow_html=True)
    st.markdown('<div class="desc-text">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–∏—Ç —Ç–µ–∫—Å—Ç—ã –∏ –≤—ã–¥–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.</div>', unsafe_allow_html=True)

    with st.container():
        ref_files = st.file_uploader("üìÅ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (.txt, .pdf, .docx)", accept_multiple_files=True, type=["txt", "pdf", "docx"], key="ref_files")
        target_file = st.file_uploader("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", type=["txt", "pdf", "docx"], key="plag_file")

    if st.button("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç", key="plag_check"):
        if ref_files and target_file:
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è..."):
                ref_texts = [extract_text(f) for f in ref_files]
                target_text = extract_text(target_file)

                matches = []
                for i, ref in enumerate(ref_texts):
                    common_words = set(target_text.split()) & set(ref.split())
                    similarity = len(common_words) / max(len(set(target_text.split())), 1)
                    if similarity > 0.05:
                        matches.append(f"‚ö†Ô∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–æ–º #{i+1}: {round(similarity*100, 2)}%")

                if not matches:
                    matches.append("‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

            st.markdown('<div class="result-box">' + "<br>".join(matches) + '</div>', unsafe_allow_html=True)
        else:
            st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
